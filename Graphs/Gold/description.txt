 Złycerz (czyli zły rycerz) wędruje po średniowiecznym grafie G = (V,E), gdzie waga każdej
 krawędzi to liczba sztabek złota, którą trzeba zapłacić za przejazd nią (myta, jedzenie, itp.). W
 każdym wierzchołku znajduje się zamek, który zawiera w skarbcu pewną daną liczbę sztabek
 złota. Złycerz może napaść na jeden zamek i zabrać całe jego złoto, ale od tego momentu
 zaczyna być ścigany i każdy przejazd po krawędzi jest dwa razy droższy, oraz dodatkowo na
 każdej drodze musi zapłacić r sztabek złota jako łapówkę (zatem od tej pory koszt przejazdu
 danej krawędzi jest równy dwukrotności wagi tej krawędzi plus wartość r). Co więcej, Złycerz nie
 może napaść więcej niż jednego zamku, bo jest trochę leniwy (oprócz tego, że zły). Proszę wskazać
 trasę Złycerza z zamku s do t o najmniejszym koszcie (lub największym zysku, jeśli to możliwe).
 Uwaga. Złycerz może przejechać po danej krawędzi więcej niż raz (np. raz jadąc do zamku, który
 chce napaść, a potem z niego wracając).

 Zadanie polega na implementacji funkcji:   gold( G,V,s,t,r )
 która na wejściu otrzymuje: graf G reprezentowany w postaci listowej, tablicę V zawierającą liczby
 sztabek złota w kolejnych zamkach, zamek początkowy s, zamek końcowy t oraz wysokość łapówki r.
 Funkcja powinna zwrócić najmniejszy koszt drogi uwzględniający ewentualny napad. Jeżeli zysk
 z napadu jest większy, od kosztu drogi należy, powstały zysk należy zwrócić jako liczbę ujemną
